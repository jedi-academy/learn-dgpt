<?xml version="1.0" encoding="UTF-8"?>
<lesson status="v2">

    <slide title="Database SUpport" layout="normal" tag="tag1">
        <p>The Database module in CodeIgniter is the largest module
            in the framework, making up roughly 20% of the codebase.</p>
        <p>It is built around a Relational Database Management
            view of data.</p>
        <p>In it, CodeIgniter provides three levels of database
            abstraction: drivers, the query builder, and models.</p>            
    </slide>

    <slide title="Database Drivers" layout="normal">
        <p>The database drivers make up the lowest level of support
            for databases. They provide for connecting to a database,
            executing SQL queries, and getting result sets back.</p>
        <p>The driver classes provide an RDB-neutral API, with handlers
            for MYSQL, Postgres, and SQLite3.</p>
        <p>A sample code extract:
        <pre>
    $db = \Config\Database::connect();
    $query = $db->query('SELECT name, title, email FROM my_table');
    $results = $query->getResult();
        </pre></p>
    </slide>
    
    <slide title="The Query Builder" layout="normal">
        <p>The Query Builder provides an O-O way to build and
            execute database queries.</p>
        <p>A sample code extract:
        <pre>
    $db      = \Config\Database::connect();
    $builder = $db->table('users');
    $query = $builder->select('title')
    ->where('id', $id)
    ->limit(10, 20)
    ->get();
        </pre></p>
    </slide>

    <slide title="CodeIgniter Models" layout="normal">
        <p>The CodeIgniter Model provides the most abstract
            and easiest to use level of database support.
        </p>
        <p>Models are bound to a database table.</p>
        <p>The <code>\CodeIgniter\Model</code> class provides automatic
            database connection, basic CRUD methods, in-model validation,
            automatic pagination, and more.</p>
    </slide>

 
    <slide title="Your Models" layout="normal">
        <p>Your models normally go inside <code>app/Models</code>.</p>
        <p>A typical model might look like:
        <pre>
    &lt;?php 
    namespace App\Models;
    use CodeIgniter\Model;
    class UserModel extends Model
    {
        protected $table      = 'users';
        protected $primaryKey = 'id';
        protected $validationRules    = [
            'username'     => 'required|alpha_numeric_space|min_length[3]',
            'email'        => 'required|valid_email|is_unique[users.email]',
            'password'     => 'required|min_length[8]',
            'pass_confirm' => 'required_with[password]|matches[password]'
        ];
    }            
        </pre></p>
    </slide>
   
    <slide title="Database Utilities" layout="normal">
        <p>Apart from the basic database support layers, CodeIgniter comes with some utility classes to help you manage your
            databases:
        <ul>
            <li>Database Forge, to create or modify tables and databases</li>
            <li>Database migrations, to modify database structure in synch with
                app updates</li>
            <li>Database seeding, a simple way to add sample data to your tables.</li>
        </ul>        
        </p>          
    </slide>

    <slide title="Life Beyond RDBs?" layout="normal">
        <p>It is important to understand how fundamental the RDB perspective
            is, in CodeIgniter and other webapp frameworks.</p>
        <p>Support for document databases is often an afterthought,</p>
        <p>RDB database support is very powerful, but also assumes a high level 
            of familiarity with RDBs and
            their tools.</p>
        <p>Next week, we will introduce you to <code>Simple\Models</code>, making life a lot
            easier. We will use those for the remainder of the course :)</p>
    </slide>

    <slide title="Database Configuration" layout="normal">
        <p>Your database access is configured by settings in 
            <code>app/Config/Database.php</code>, or
            in a <code>.env</code> file in your
            project root.</p>
        <p>The latter is the preferred approach, as the file can
            be "git ignored", so it doesn't get saved in a public
            code repository.
        </p>

    </slide>
-->
</lesson>
