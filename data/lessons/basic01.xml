<?xml version="1.0" encoding="UTF-8"?>
<!--
Lesson 02 - MVC Framework Introduction
-->
<lesson status="1.3">
    <!-- Activity metadata ... override anything from the course or organizer -->

    <!-- Agenda -->
    <slide title="Agenda" layout="normal">
        <ol>
            <li>
                <a href="#{tag1}">Frameworks</a>
            </li>
            <li>
                <a href="#{tag2}">Models</a>
            </li>
            <li>
                <a href="#{tag3}">Controllers</a>
            </li>
            <li>
                <a href="#{tag4}">Views</a>
            </li>
            <li>
                <a href="#{tag5}">Support Components</a>
            </li>
        </ol>
    </slide>

    <slide title="Web Tier Basics" layout="normal" tag="{tag0}">
        <p>The simplest view of a web server is that it is a "black box"
            web-tier contoller,
            responsible for handling incoming HTTP requests.</p>
        <p>Some of these requests are for publically visible files, and those 
            can be just "returned" to the web client.</p>
        <p>Other requests involve application logic, and the web server
            would then determine which application component(s) to request
            service from, and format the results of that for presentation
            to the web client.</p>
        <div class="center">
            <img class="scale" width="658" height="173"  src="/pix/lessons/1-1.png"/>
        </div>
    </slide>

    <slide title="Web Server Basics **" layout="normal">
        <div class="left">
            <p>A richer view of a web server suggests that it is itself a framework.
                Incoming requests are encapsulated, as are the responses.</p>
            <p>Developers use a framework running on the web server.
                It provides an API for developers to build web components,
                and to access data stored locally or on its own server.</p>
                <p>
                    <i>Object models provided through the web server:
                part of the API for working in that environment, eg server framework.
                Object models provided by third parties,
                to speed your development and enhance security/consistency:
                the MVC framework !</i></p>
        </div>
        <div class="right">
            <br/>
            <img class="scale" width="483" height="320" src="/pix/lessons/1-2.png"/>
        </div>
    </slide>

    <slide title="Fundamental Pattern ***" layout="normal">
        <div class="left">
            <p>A model is a component acting as a data or
                database abstraction/adapter. It should be
                the *only* way you access data.</p>
            <p>A view is a component to present data, i.e.
                to create HTML, PDF, or whatever is appropriate.
                It could be an object, or it could be handled
                by a script with embedded logic snippets.</p>
            <p>A controller handles usecases, "wiring"
                together models and views as needed.</p>
            <p><i>MVC is all about "separation of concerns" !</i></p>
        </div>
        <div class="right">
            <img class="scale" width="696" height="600" src="/pix/lessons/1-3.png"/>
        </div>
    </slide>

    <slide title="Approach Evolution" layout="normal">
        <div class="left">
            <p>In the beginning (30 years ago), web "pages" were handled individually.
                Developers used HTML generator tools to create each "page".</p>
            <p>Modern practice (10 years ago?) has evolved to the front
                controller, a single entry point. It bootstraps a framework,
                which then makes routing decisions appropriately.</p>
            <p>Some frameworks act as a front controller through
                their server socket handling, constructing suitable
                objects before passing control to the nominal handlers
                (eg JSP).</p>
        </div>
        <div class="right">
            <img class="scale" width="590" height="642" src="/pix/lessons/1-4.png"/>
        </div>
    </slide>

    <slide title="Frameworks *" layout="normal" tag="tag1">
        <p>An MVC framework is one with conventions
            and pre-built components that encourage or enforce
            good programming practices. These frameworks are
            usually server-side, though some have client-side Javascript
            components too.</p>
        <p>CodeIgniter is one such framework.</p>
        <p>
            <a href="https://en.wikipedia.org/wiki/Comparison_of_web_frameworks" target="_blank">Others</a> 
            include CakePHP, Fat-Free, FuelPHP, Kohana, Laravel, Symfony2, Yii and Zend</p>
        <p>Choose a framework according to its fit with your development
            practices (design patterns), bundled or easily-incorporated components,
            and ease of integration with your organization's other IT.</p>
        <p><i>Which is most common or the best one? Yes !</i></p>
    </slide>

    <slide title="Design Pattern Driven! **" layout="normal">
        <div class="left">
            <p>Model-View-Controller is a design pattern,
                i.e. an "industry-accepted best practice".
                MVC, in particular, that says that it is good to keep separate concerns
                apart from each other.</p>
            <p>CodeIgniter has base classes for models and controllers,
                and it has components to build presentation content
                separate from these. This is not conventional PHP scripting!</p>
        </div>
        <div class="right">
            <p>A typical MVC framework incorporates many other 
                <a href="http://en.wikipedia.org/wiki/Software_design_pattern" target="_blank">
                    design patterns</a>:</p>
            <ul>
                <li>DAO (DB access)</li>
                <li>Business delegate (framework itself)</li>
                <li>Session facade (session library)</li>
                <li>Front controller (index.php)</li>
                <li>Intercepting filter (hooks)</li>
                <li>Active record (model)</li>
            </ul>
            <p><i>Check out <a href="http://www.corej2eepatterns.com/">Core J2EE Patterns</a> for more info!</i></p>
        </div>
    </slide>

    <slide title="Categorizing MVC Frameworks" layout="normal">
        <p>Frameworks come in all sizes.</p>
        <p>They differ in philosophy, scope, management tools
        &amp; included plugins.</p>
        <table style="width:90%; font-size:80%;text-align:left">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Adds</th>
                    <th>Size</th>
                    <th>Example</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td style="width:20%">Micro</td>
                    <td style="width:40%">MVC, plugins, routing, instance</td>
                    <td style="width:20%">0.3MB</td>
                    <td style="width:20%">Fat-Free</td>
                </tr>
                <tr>
                    <td>Lean</td>
                    <td>Config, templates</td>
                    <td>2MB</td>
                    <td>CodeIgniter</td>
                </tr>
                <tr>
                    <td>Normal</td>
                    <td>Scaffolding, auth, ORM, CLI, IDE plugin</td>
                    <td>10MB</td>
                    <td>CakePHP</td>
                </tr>
                <tr>
                    <td>Enterprise</td>
                    <td>Engines (templating, ORM), included plugins, installer, starter, generators</td>
                    <td>24MB+</td>
                    <td>Symfony2</td>
                </tr>
            </tbody>
        </table>
    </slide>

    <slide title="CodeIgniter Architecture" layout="normal">
        <div class="left">
            <p>CodeIgniter "routes" incoming requests, identifying the
                appropriate controller to handle each one.</p>
            <p>The controller then uses other CI components, like helpers, 
                models, libraries, etc, to build what is passed to a view.
                Many such components are built into CI, and a
                developer would normally build their webapp by using or extending these.</p>
            <p>The diagram to the right is a depiction of the architecture,
                and it will be elaborated on over the next six or seven lessons.
                In the meantime, it is a useful visualization of how any
                such framework could be reasonably architected.</p>
        </div>
        <div class="right">
            <img class="scale" width="697" height="205" src="/pix/lessons/1-6.png"/>
        </div>
    </slide>

    <slide title="CodeIgniter Examples" layout="normal">
        <div class="left">
            <p>The <a href="http://www.codeigniter.com/">CodeIgniter website</a> itself is (not surprisingly) implemented using CodeIgniter,
                and it is <a href="https://github.com/bcit-ci/codeigniter-website">open-sourced</a>:)</p>
            <p>Many major corporations have used CodeIgniter, whether internally or public-facing: 
                Uber, Apple, Telus</p>
        </div>
        <div class="right">
            <img class="scale" width="600" height="458" src="/pix/lessons/1-8.png"/>
        </div>
    </slide>

    <slide title="Other Frameworks" layout="normal">
        <p>Is there life outside CodeIgniter?
            Absolutely ... there are a number of frameworks, for a multitude of programming languages.
            From github alone, based on a search for web frameworks.</p>
        <ul>
            <li>4,816 JavaScript</li>
            <li>2,680 PHP</li>
            <li>2,624 Python</li>
            <li>2,607 Java</li>
            <li>1,513 HTML</li>
            <li>1,251 CSS</li>
            <li>931 C#</li>
            <li>847 Ruby</li>
            <li>712 Go</li>
            <li>293 Typescript</li>
        </ul>
    </slide>
</lesson>
